
// Geometry adaptor for ArnoldRenderer. This one tries to implement everything
// only based on the SceneAssembly interfaces, so that it worke fine once
// the SceneAssembly potentially overrides materials etc.
//
// Still, if one wants to keep it simple and access directly the
// SceneGraph objects, he can try to cast 'this.sourceReference.getObjectValue()'
// in a SGTransformed, or 'this.geometryContainerRef.getObjectValue()'
// in a SGGeometry.
//
object GeometryInstanceToArnoldRenderer : BaseSWGeometryInstanceAdaptor, ArnoldRendererTargetAdaptor {
  ArnoldRenderer renderer;

  // Add whatever renderer data/state is associated with this Geometry.
  // All geometry attributes might be treated directly here, or these could
  // use their own registered adaptor as for OGL+RTR2

  // Links to scene material data; for now only check the 'color'
  SWElementReference colorPropertyRef;

  // Arnold handles instancing a bit oddly.  A geometry may have
  // instances attached, but a geo is _not_ an instance otherwise.
  // In SG, all geo's are instances.  We need to detect if we are the
  // first isntance to translate this geo, and if so we keep a pointer
  // to the arnold geo, otherwise we allocate a new instance and hold
  // a pointer to this structure instead.
  AtNode arnoldInstance;

  MaterialToArnoldRenderer materialAdaptor;
};

GeometryInstanceToArnoldRenderer.setRenderer!(ArnoldRenderer renderer) {
  this.renderer = renderer;
}

~GeometryInstanceToArnoldRenderer() {
}

SGObject getEntityInstanceMaterial(SGObject instance) {
  // TODO
  return SGObject();
}

function GeometryInstanceToArnoldRenderer.createSubStuff!() {

  // Are we an instance or original in arnold-land?
  PolygonMeshToArnoldRenderer geomToArnold = this.geometryAdaptor;
  if (geomToArnold == null)
    return;

  // Get the pointer to the Arnold version of our mesh
  AtNode geomNode = geomToArnold.arnoldMesh;

  // Arnold doesn't support actual instancing, instead you 
  // can create a ginstance node to refer to an original node
  // We resolve the difference here by checking for a value
  // on the geometry.  If it exists, then we are not the first
  // instance to refer to this geometry, so create a Arnold
  // instance node and set our values (xform, mat) on that instead 
  Boolean isInstanced = AiNodeGetBool(geomNode, 'fabric_translator');
  if (!isInstanced) // if this is the first node to translate this geometry
  {
    this.arnoldInstance = geomNode;
    AiNodeDeclare(geomNode, "fabric_translator", "constant BOOL");
    AiNodeSetBool(geomNode, 'fabric_translator', true);
  }
  else 
  {
    AtNode instanceNode = AiNode("ginstance");
    AiNodeSetPtr( instanceNode, "node", geomNode._handle );
    this.arnoldInstance = instanceNode;
  }

  // Names must? be unique in Arnold, so ensure our node is named appropriately
  String instName = this.sourceReference.getName();
  AiNodeSetStr( this.arnoldInstance, 'name', instName);

  // Create material (assume one exists?)
  Ref<SGObjectWrapper> wrapper = this.sourceReference.getObjectValue();
  SGContext instContext;
  SGObject instObj = wrapper.getWrapped(instContext);
  SGObject sgMaterial = getEntityInstanceMaterial(instObj);

  // Create the arnold material, or default if none available
  AtNode arnoldMaterial;
  if (sgMaterial.isValid())
  {
    this.materialAdaptor = MaterialToArnoldRenderer(sgMaterial);
    this.materialAdaptor.setRenderer(this.renderer);
    arnoldMaterial = this.materialAdaptor.getAiNode();
  }

  if (!arnoldMaterial.isValid())
  {
    // We are the first to take ownership of this geom
    // create a lambert shader TODO - proper materials
    String mtlName = "shader" + this.sourceReference.getName();
    arnoldMaterial = AiNodeLookUpByName(mtlName);
    if (!arnoldMaterial.isValid())
    {
      arnoldMaterial = AiNode("lambert");
      AiNodeSetStr(arnoldMaterial, "name", mtlName);
      AiNodeSetRGB(arnoldMaterial, "Kd_color", 0.0, 1.0, 0.0); // TODO - get color from somewhere.
    }
  }

  // assign the f2ateapot's shader
  AiNodeSetPtr(this.arnoldInstance, "shader", arnoldMaterial._handle);
}
// Helper for getting a Color sub-property
function GetSWPropertyValue( SWElementReference owner, String paramName, io SWElementReference target, io Color color ) {
  Object dummy = null;
  owner.getProperty( "color", target, dummy );
  if( target.isValid() ) {
    // Make sure the parameter is a Color
    Size structSize;
    Type type;
    target.getStorageType( structSize, type );
    if( type == Color )
      target.getStructValue( color.data(), UInt32( color.dataSize() ) );
    else
      setError("GetSWPropertyValue: parameter " + target.getFullName() + " is not a Color");
  }
}

Boolean GeometryInstanceToArnoldRenderer.update!(Ref<SWContext> swContext) {

  this.parent.update( swContext );

  if (!this.arnoldInstance.isValid()) {
    this.createSubStuff();
  }

  Mat44 m = this.getGlobalTransform();
  AiNodeSetMatrix( this.arnoldInstance, "matrix", m );

  return true;//Don't bother tracking changes
}
