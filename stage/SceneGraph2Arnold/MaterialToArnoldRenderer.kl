require GamExToSceneGraph;

////////////////////////////////////////////////////////////////////////////////////
// Define an adaptor skeleton for SGPointLight.
// This is a simplified hierarchy; a base one could have been defined
// for the SGBaseLight.
object MaterialToArnoldRenderer : BaseSWTransformedAdaptor, ArnoldRendererTargetAdaptor {
  ArnoldRenderer renderer;
  AtNode arnoldMaterial;

  TextureToArnoldRenderer textureAdators[];

  SGObject sourceMaterial;
};

MaterialToArnoldRenderer(SGObject mtl) {
	this.sourceMaterial = mtl;
}

~MaterialToArnoldRenderer() {
}

function AtNode MaterialToArnoldRenderer.getAiNode() {
	return this.arnoldMaterial;
}

function MaterialToArnoldRenderer.setRenderer!(ArnoldRenderer renderer) {
  this.renderer = renderer;

  // This function is our initialization routine, Here we create the material
  String name = this.sourceMaterial.getName();
  AtNode existingNode = AiNodeLookUpByName(name);
  if (existingNode.isValid())
  {
  	//report('NOTE: Creating material with duplicate name!' + name);
  	this.arnoldMaterial = existingNode;
  }
  else
  {
    // TODO
    this.arnoldMaterial = this.translateArnoldMaterial();
  }
}

// Create an Arnold material based on default GameX shader parameters
function AtNode MaterialToArnoldRenderer.translateArnoldMaterial!()
{
  return AtNode(); // TOOD
}

Boolean MaterialToArnoldRenderer.update!(Ref<SWContext> swContext) {

  this.parent.update( swContext );

  for (UInt32 i = 0; i < this.textureAdators.size(); i++)
  {
  	this.textureAdators[i].update(swContext);
  }

  return true;
}
