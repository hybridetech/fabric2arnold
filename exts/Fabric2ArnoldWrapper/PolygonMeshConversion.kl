require Fabric2Arnold;
require Geometry;


function attributeToAtArray(io AtNode node, io PolygonMesh mesh, GeometryAttribute attr, io GeometryAttribute outAttr, UInt8 type, String name, String indices)
{
  if (attr == null)
    return;

  UInt32 packedIndices[];
  mesh.getPolygonPackedSharedAttributeValues(attr, outAttr, packedIndices);
  
  AtArray vlist = AiArrayConvert(outAttr.size(), 1, type, outAttr.data());
  AtArray vidxs = AiArrayConvert(packedIndices.size(), 1, AI_TYPE_INT, packedIndices.data());
  AiNodeSetArray(node, name,  vlist);
  AiNodeSetArray(node, indices,  vidxs);
}

function AtNode FabricToArnoldPolygonMesh( io PolygonMesh mesh)
{
  AtNode node = AiNode("polymesh");
  AiNodeSetBool(node, "smoothing", true);

  return FabricToArnoldPolygonMesh(mesh, node);
}

function AtNode FabricToArnoldPolygonMesh( io PolygonMesh mesh, io AtNode node)
{
  // First, assign the polygon point and indices
  UInt32 klnsides[];
  UInt32 klindices[];
  mesh.getTopologyCountsAndAttributeIndices(klnsides, klindices);
  AtArray nsides = AiArrayConvert(klnsides.size(), 1, AI_TYPE_INT, klnsides.data());
  AiNodeSetArray(node, "nsides", nsides);

  // Set positions
  {
    Ref<Vec3Attribute> positions = mesh.attributes.positionsAttribute;
    GeometryAttribute tempStorageP = Vec3Attribute();
    attributeToAtArray(node, mesh, positions, tempStorageP, AI_TYPE_POINT, 'vlist', 'vidxs');
  }

  // Set normals (if exist)
  {
    Ref<Vec3Attribute> normals = mesh.attributes.normalsAttribute;
    GeometryAttribute tempStorageN = Vec3Attribute();
    attributeToAtArray(node, mesh, normals, tempStorageN, AI_TYPE_VECTOR, 'nlist', 'nidxs');
  }

  // For some reason, enabling this option causes exceptions.  Re-enable later when we know what da ell is going on
  // Set UV's
/*  {
    Ref<Vec2Attribute> attrUVs = mesh.getAttribute("uvs0", Vec2Attribute);
    GeometryAttribute tempStorageUV = Vec2Attribute();
    attributeToAtArray(node, mesh, attrUVs, tempStorageUV, AI_TYPE_POINT2, 'uvlist', 'uvidxs');
  }*/
  return node;
}
