
////////////////////////////////////////////////////////////////////////////////////
// Define a base adaptor skeleton 
object BaseLightToArnoldRenderer : BaseSWTransformedAdaptor, ArnoldRendererTargetAdaptor {
  ArnoldRenderer renderer;
  AtNode arnoldLight;
};

function BaseLightToArnoldRenderer.setRenderer!(ArnoldRenderer renderer) {}

function BaseLightToArnoldRenderer.init!(ArnoldRenderer renderer, String lightType)
{
  this.renderer = renderer;

  // This function is our initialization routine, Here we create the point light
  this.arnoldLight = AiNode(lightType);

  String name = this.sourceReference.getName();
  AiNodeSetStr(this.arnoldLight, "name", name);
}

function Boolean BaseLightToArnoldRenderer.update!(Ref<SWContext> swContext)
{
  this.parent.update( swContext );

  SGBaseLight sourceLight = this.sourceReference.getObjectValue();

  // Note: get the SGContext from the elementRef to ensure we get the values 
  // in the context of the right parent and frame.
  SGContext sourceLightContext = this.sourceReference.getSGContext();

  // Every light has a position intensity and color
  Mat44 mtx = sourceLight.getGlobalTransform( sourceLightContext);
  AiNodeSetMatrix(this.arnoldLight, "matrix", mtx);

  Float32 intensity = sourceLight.getIntensity( sourceLightContext );
  AiNodeSetFlt(this.arnoldLight, "intensity", intensity);
  
  Color color = sourceLight.getColor( sourceLightContext );
  AiNodeSetRGB(this.arnoldLight, "color", color.r, color.g, color.b);

  return true;
}


////////////////////////////////////////////////////////////////////////////////////
// Define an adaptor for SGPointLight.
object SGPointLightToArnoldRenderer : BaseLightToArnoldRenderer {
  
};

SGPointLightToArnoldRenderer.setRenderer!(ArnoldRenderer renderer) {
  this.init(renderer, "point_light");
}

~SGPointLightToArnoldRenderer() {
}

Boolean SGPointLightToArnoldRenderer.update!(Ref<SWContext> swContext) {
  this.parent.update( swContext );
  return true;
}

////////////////////////////////////////////////////////////////////////////////////
// Define an adaptor skeleton for SGShadowPointLight,
// which only adds handling of the "castShadow" parameter.
object SGShadowPointLightToArnoldRenderer : SGPointLightToArnoldRenderer {
};

Boolean SGShadowPointLightToArnoldRenderer.update!(Ref<SWContext> swContext) {
  this.parent.update( swContext );

  SGShadowPointLight sourceLight = this.sourceReference.getObjectValue();

  // Note: get the SGContext from the elementRef to ensure we get the values 
  // in the context of the right parent and frame.
  SGContext sourceLightContext = this.sourceReference.getSGContext();

  // Just update the 'castShadow' param, base class took care of others
  Boolean castShadow = sourceLight.castShadows( sourceLightContext );
  AiNodeSetBool(this.arnoldLight, "cast_shadows", castShadow);
  return true;
}

////////////////////////////////////////////////////////////////////////////////////
object SGDirectionalLightToArnoldRenderer : BaseLightToArnoldRenderer {
  ArnoldRenderer renderer;
  AtNode arnoldLight;
};

SGDirectionalLightToArnoldRenderer.setRenderer!(ArnoldRenderer renderer) {
  this.parent.init(renderer, "distant_light");
  this.renderer = renderer;

  // by default, we don't cast shadows?
  AiNodeSetBool(this.arnoldLight, "cast_shadows", false);
}

~SGDirectionalLightToArnoldRenderer() {
}

Boolean SGDirectionalLightToArnoldRenderer.update!(Ref<SWContext> swContext) {

  this.parent.update( swContext );

  SGDirectionalLight sourceLight = this.sourceReference.getObjectValue();

  // Note: get the SGContext from the elementRef to ensure we get the values 
  // in the context of the right parent and frame.
  SGContext sourceLightContext = this.sourceReference.getSGContext();
  Vec3 direction = sourceLight.getGlobalDirection( sourceLightContext );
  AiNodeSetVec(this.arnoldLight, "direction", direction.x, direction.y, direction.z);
  return true;
}

////////////////////////////////////////////////////////////////////////////////////
object SGShadowDirectionalLightToArnoldRenderer : SGDirectionalLightToArnoldRenderer {
};

~SGShadowDirectionalLightToArnoldRenderer() {
}

SGShadowDirectionalLightToArnoldRenderer.setRenderer!(ArnoldRenderer renderer) {
  this.parent.setRenderer(renderer);

  SGShadowDirectionalLight sourceLight = this.sourceReference.getObjectValue();
  // Note: get the SGContext from the elementRef to ensure we get the values 
  // in the context of the right parent and frame.
  SGContext sourceLightContext = this.sourceReference.getSGContext();

  // Just update the 'castShadow' param, base class took care of others
  Boolean castShadow = sourceLight.castShadows( sourceLightContext );
  AiNodeSetBool(this.arnoldLight, "cast_shadows", castShadow);

  // Set some default values to improve translation
  AiNodeSetFlt(this.arnoldLight, "angle", 2.0);
  AiNodeSetInt(this.arnoldLight, "angle", 3);
}