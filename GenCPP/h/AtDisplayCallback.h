#ifndef __KL2EDK_AUTOGEN_AtDisplayCallback__
#define __KL2EDK_AUTOGEN_AtDisplayCallback__

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'AtDisplayCallback.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 1.15.3
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 1 || FABRIC_EDK_VERSION_MIN != 15
# error "This file needs to be rebuilt for the current EDK version!"
#endif

#include "global.h"
#include "RGBA.h"
#include "Color.h"

namespace Fabric { namespace EDK { namespace KL {

// KL interface 'AtDisplayCallback'
// Defined at GenKL//_AtDisplayCallback.kl:8:1

class AtDisplayCallback
{
public:
  
  struct VTable
  {
    void (*Callback_C27B7EAFBD9F9EAD569D26B7CEF78AA0)(
      ObjectCore * const *objectCorePtr,
      Traits< UInt32 >::INParam bucketX,
      Traits< UInt32 >::INParam bucketY,
      Traits< UInt32 >::INParam bucketWidth,
      Traits< UInt32 >::INParam bucketHeight,
      Traits< ExternalArray< RGBA > >::INParam rgbaBuffer,
      Traits< ExternalArray< Color > >::INParam colorBuffer,
      Traits< Data >::INParam cb_data
      );
  };
  
  struct Bits
  {
    ObjectCore *objectCorePtr;
    SwapPtr<VTable const> const *vTableSwapPtrPtr;
  } *m_bits;
  
protected:
  
  friend struct Traits< AtDisplayCallback >;
  
  static void ConstructEmpty( AtDisplayCallback *self )
  {
    self->m_bits = 0;
  }
  
  static void ConstructCopy( AtDisplayCallback *self, AtDisplayCallback const *other )
  {
    if ( (self->m_bits = other->m_bits) )
      AtomicUInt32Increment( &self->m_bits->objectCorePtr->refCount );
  }
  
  static void AssignCopy( AtDisplayCallback *self, AtDisplayCallback const *other )
  {
    if ( self->m_bits != other->m_bits )
    {
      Destruct( self );
      ConstructCopy( self, other );
    }
  }
  
  static void Destruct( AtDisplayCallback *self )
  {
    if ( self->m_bits
      && AtomicUInt32DecrementAndGetValue( &self->m_bits->objectCorePtr->refCount ) == 0 )
    {
      self->m_bits->objectCorePtr->lTableSwapPtrPtr->get()->lifecycleDestroy(
        &self->m_bits->objectCorePtr
        );
    }
  }
  
public: 
  
  typedef AtDisplayCallback &Result;
  typedef AtDisplayCallback const &INParam;
  typedef AtDisplayCallback &IOParam;
  
  AtDisplayCallback()
  {
    ConstructEmpty( this );
  }
  
  AtDisplayCallback( AtDisplayCallback const &that )
  {
    ConstructCopy( this, &that );
  }
  
  AtDisplayCallback &operator =( AtDisplayCallback const &that )
  {
    AssignCopy( this, &that );
    return *this;
  }
  
  ~AtDisplayCallback()
  {
    Destruct( this );
  }
  
  void appendDesc( String::IOParam string ) const
  {
    if ( m_bits )
      m_bits->objectCorePtr->lTableSwapPtrPtr->get()->appendDesc( &m_bits->objectCorePtr, string );
    else string.append( "null", 4 );
  }
  
  bool isValid() const
  {
    return !!m_bits;
  }
  
  operator bool() const
  {
    return isValid();
  }
  
  bool operator !() const
  {
    return !isValid();
  }
  
  bool operator ==( INParam that )
  {
    return m_bits == that.m_bits;
  }
  
  bool operator !=( INParam that )
  {
    return m_bits != that.m_bits;
  }
  
  
  void Callback(
    Traits< UInt32 >::INParam bucketX,
    Traits< UInt32 >::INParam bucketY,
    Traits< UInt32 >::INParam bucketWidth,
    Traits< UInt32 >::INParam bucketHeight,
    Traits< ExternalArray< RGBA > >::INParam rgbaBuffer,
    Traits< ExternalArray< Color > >::INParam colorBuffer,
    Traits< Data >::INParam cb_data
    )
  {
    m_bits->vTableSwapPtrPtr->get()->Callback_C27B7EAFBD9F9EAD569D26B7CEF78AA0(
      &m_bits->objectCorePtr,
      bucketX,
      bucketY,
      bucketWidth,
      bucketHeight,
      rgbaBuffer,
      colorBuffer,
      cb_data
      );
  }
};

inline void Traits<AtDisplayCallback>::ConstructEmpty( AtDisplayCallback &val )
{
  AtDisplayCallback::ConstructEmpty( &val );
}
inline void Traits<AtDisplayCallback>::ConstructCopy( AtDisplayCallback &lhs, AtDisplayCallback const &rhs )
{
  AtDisplayCallback::ConstructCopy( &lhs, &rhs );
}
inline void Traits<AtDisplayCallback>::AssignCopy( AtDisplayCallback &lhs, AtDisplayCallback const &rhs )
{
  AtDisplayCallback::AssignCopy( &lhs, &rhs );
}
inline void Traits<AtDisplayCallback>::Destruct( AtDisplayCallback &val )
{
  AtDisplayCallback::Destruct( &val );
}

}}}

#endif // __KL2EDK_AUTOGEN_AtDisplayCallback__
